Strings

Today's Agenda:
    - String Definition
    - Immutability and Concatenation
    - Comparing Strings
    - String Comparison Method
    - String Manipulation Methods


String Definition:
    - A string is letters, numbers, and special characters strung together.
    - String are objects, not primitives.
    - This means that string variables are reference type, not primitive type, and that is why '==' operator does not behave as expected when comparing strings.
    - even though they had the same value, they were two distinct objects
        - one was created from a string literal
        - the other was created by the scanner reading what the user typed into

Immutability and Concatenation
    - String are immutable
        Meaning: Once a string is created, it cannot be changed

    Example:
          String s="Sachin";
           s.concat(" Tendulkar");//concat() method adds the string at the end
           System.out.println(s);//will print Sachin because strings are immutable objects

    - Concatenation:
        - The '+' operator performs string concatenation when one of its operands is a string
        - Another way is with the 'concat()' on any string object

    Example:
        String message = "Hello";
        System.out.println(message); // prints "Hello"
        message = message + " World!";
        System.out.println(message); // prints "Hello, World!"

    ** Now you may think the example above may disprove string is immutability thinking we changed the value of the message variable, However your wrong. When we do a string concatenation, we are not modifying the original string, rather we are creating a new String object, updating the variable message to the new String object instead of the old one.


Comparing Strings
    - Since strings are not primitive data types but objects, we must compare them rather than the relational operators
    - If you try to compare the two String objects, it will not work when using '=='
    - The two methods that we should use when comparing String objects:
        - '.equals()'
        - '.equalsIgnoreCase()'

    Example:

     DON"T DO:
        if ("I am a string" == "I am a string") {
            System.out.println("Strings are equal");
        }

     DO THIS INSTEAD:
        if ("I am a string".equals("I am a string")) {
            System.out.println("Strings are equal");
        }


String Comparison Methods:
    - These are some common methods, we use to compare strings
    - All of the methods here will return 'True' or 'False'

    '.equals()'             Case-Sensitive, Determine if two strings have the same value
    '.equalsIgnoreCase()'   Not Case-Sensitive, Determine if two strings have the same value
    '.startsWith()'         Case-Sensitive, If one String starts with another
    '.endsWith()'           Case-Sensitive, If one string ends with another

    EXAMPLE:

        String input = "Codeup Rocks!";

        input.equals("codeup rocks!"); // false
        input.equals("Codeup Rocks!"); // true

        input.equalsIgnoreCase("codeup rocks!"); // true
        input.equalsIgnoreCase("Codeup Rocks!"); // true

        input.startsWith("codeup") // false
        input.startsWith("Codeup") // true

        input.endsWith("rocks") // false
        input.endsWith("rocks!") // false
        input.endsWith("Rocks!") // true
